{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getDatabase, ref, child, get, update } from \"firebase/database\";\nimport { StatusCodes } from 'http-status-codes';\nexport function setupConnectionToDb() {\n  // TODO: Add SDKs for Firebase products that you want to use\n  // https://firebase.google.com/docs/web/setup#available-libraries\n\n  // Your web app's Firebase configuration\n  const firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID\n  };\n\n  // Initialize Firebase\n  const app = initializeApp(firebaseConfig);\n\n  // Initialize Realtime Database and get a reference to the service\n  const database = getDatabase(app);\n  return database;\n}\nexport async function getFamily(password) {\n  const dbRef = ref(getDatabase());\n  return await get(child(dbRef, \"families\")).then(snapshot => {\n    if (snapshot.exists()) {\n      let families = snapshot.val();\n      for (let index = 0; index < families.length; index++) {\n        const family = families[index];\n        if (family.password === password) {\n          return family;\n        }\n      }\n      return StatusCodes.NOT_FOUND;\n    } else {\n      console.log(\"No data available\");\n      return StatusCodes.BAD_REQUEST;\n    }\n  }).catch(error => {\n    console.error(error);\n    return StatusCodes.SERVICE_UNAVAILABLE;\n  });\n}\nexport async function updateFamily(family) {\n  const dbRef = ref(getDatabase());\n  const updates = {};\n  updates[`/families/${family.id}`] = family;\n  return await update(dbRef, updates).then(() => {\n    return StatusCodes.OK;\n  }).catch(() => {\n    console.error(\"error\");\n    return StatusCodes.SERVICE_UNAVAILABLE;\n  });\n}","map":{"version":3,"names":["initializeApp","getDatabase","ref","child","get","update","StatusCodes","setupConnectionToDb","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","app","database","getFamily","password","dbRef","then","snapshot","exists","families","val","index","length","family","NOT_FOUND","console","log","BAD_REQUEST","catch","error","SERVICE_UNAVAILABLE","updateFamily","updates","id","OK"],"sources":["C:/Users/marci/source/repos/jgmarry.me/src/backend/database-helper/databaseUtils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase, ref, child, get, update } from \"firebase/database\";\r\nimport { StatusCodes } from 'http-status-codes';\r\n\r\nexport function setupConnectionToDb() {\r\n\r\n    // TODO: Add SDKs for Firebase products that you want to use\r\n    // https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n    // Your web app's Firebase configuration\r\n    const firebaseConfig = {\r\n        apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n        authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n        databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n        projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n        storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n        messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\r\n        appId: process.env.REACT_APP_FIREBASE_APP_ID\r\n    }\r\n\r\n    // Initialize Firebase\r\n    const app = initializeApp(firebaseConfig);\r\n\r\n\r\n    // Initialize Realtime Database and get a reference to the service\r\n    const database = getDatabase(app);\r\n\r\n    return database;\r\n}\r\n\r\nexport async function getFamily(password) {\r\n\r\n    const dbRef = ref(getDatabase());\r\n\r\n    return await get(child(dbRef, \"families\"))\r\n        .then((snapshot) => {\r\n            if (snapshot.exists()) {\r\n                let families = snapshot.val();\r\n\r\n                for (let index = 0; index < families.length; index++) {\r\n                    const family = families[index];\r\n\r\n                    if (family.password === password) {\r\n                        return family;\r\n                    }\r\n                }\r\n\r\n                return StatusCodes.NOT_FOUND;\r\n            }\r\n            else {\r\n                console.log(\"No data available\");\r\n                return StatusCodes.BAD_REQUEST;\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.error(error);\r\n            return StatusCodes.SERVICE_UNAVAILABLE;\r\n        });\r\n}\r\n\r\nexport async function updateFamily(family) {\r\n\r\n    const dbRef = ref(getDatabase());\r\n    const updates = {};\r\n    updates[`/families/${family.id}`] = family;\r\n\r\n    return await update(dbRef, updates)\r\n        .then(() => { return StatusCodes.OK; })\r\n        .catch(() => {\r\n            console.error(\"error\");\r\n            return StatusCodes.SERVICE_UNAVAILABLE;\r\n        });\r\n}\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,WAAW,EAAEC,GAAG,EAAEC,KAAK,EAAEC,GAAG,EAAEC,MAAM,QAAQ,mBAAmB;AACxE,SAASC,WAAW,QAAQ,mBAAmB;AAE/C,OAAO,SAASC,mBAAmB,GAAG;EAElC;EACA;;EAEA;EACA,MAAMC,cAAc,GAAG;IACnBC,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,0BAA0B;IAC9CC,UAAU,EAAEH,OAAO,CAACC,GAAG,CAACG,8BAA8B;IACtDC,WAAW,EAAEL,OAAO,CAACC,GAAG,CAACK,+BAA+B;IACxDC,SAAS,EAAEP,OAAO,CAACC,GAAG,CAACO,6BAA6B;IACpDC,aAAa,EAAET,OAAO,CAACC,GAAG,CAACS,iCAAiC;IAC5DC,iBAAiB,EAAEX,OAAO,CAACC,GAAG,CAACW,4BAA4B;IAC3DC,KAAK,EAAEb,OAAO,CAACC,GAAG,CAACa;EACvB,CAAC;;EAED;EACA,MAAMC,GAAG,GAAGzB,aAAa,CAACQ,cAAc,CAAC;;EAGzC;EACA,MAAMkB,QAAQ,GAAGzB,WAAW,CAACwB,GAAG,CAAC;EAEjC,OAAOC,QAAQ;AACnB;AAEA,OAAO,eAAeC,SAAS,CAACC,QAAQ,EAAE;EAEtC,MAAMC,KAAK,GAAG3B,GAAG,CAACD,WAAW,EAAE,CAAC;EAEhC,OAAO,MAAMG,GAAG,CAACD,KAAK,CAAC0B,KAAK,EAAE,UAAU,CAAC,CAAC,CACrCC,IAAI,CAAEC,QAAQ,IAAK;IAChB,IAAIA,QAAQ,CAACC,MAAM,EAAE,EAAE;MACnB,IAAIC,QAAQ,GAAGF,QAAQ,CAACG,GAAG,EAAE;MAE7B,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGF,QAAQ,CAACG,MAAM,EAAED,KAAK,EAAE,EAAE;QAClD,MAAME,MAAM,GAAGJ,QAAQ,CAACE,KAAK,CAAC;QAE9B,IAAIE,MAAM,CAACT,QAAQ,KAAKA,QAAQ,EAAE;UAC9B,OAAOS,MAAM;QACjB;MACJ;MAEA,OAAO/B,WAAW,CAACgC,SAAS;IAChC,CAAC,MACI;MACDC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChC,OAAOlC,WAAW,CAACmC,WAAW;IAClC;EACJ,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;IACdJ,OAAO,CAACI,KAAK,CAACA,KAAK,CAAC;IACpB,OAAOrC,WAAW,CAACsC,mBAAmB;EAC1C,CAAC,CAAC;AACV;AAEA,OAAO,eAAeC,YAAY,CAACR,MAAM,EAAE;EAEvC,MAAMR,KAAK,GAAG3B,GAAG,CAACD,WAAW,EAAE,CAAC;EAChC,MAAM6C,OAAO,GAAG,CAAC,CAAC;EAClBA,OAAO,CAAE,aAAYT,MAAM,CAACU,EAAG,EAAC,CAAC,GAAGV,MAAM;EAE1C,OAAO,MAAMhC,MAAM,CAACwB,KAAK,EAAEiB,OAAO,CAAC,CAC9BhB,IAAI,CAAC,MAAM;IAAE,OAAOxB,WAAW,CAAC0C,EAAE;EAAE,CAAC,CAAC,CACtCN,KAAK,CAAC,MAAM;IACTH,OAAO,CAACI,KAAK,CAAC,OAAO,CAAC;IACtB,OAAOrC,WAAW,CAACsC,mBAAmB;EAC1C,CAAC,CAAC;AACV"},"metadata":{},"sourceType":"module","externalDependencies":[]}